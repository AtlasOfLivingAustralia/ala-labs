---
title: "Add buffers to a shapefile"
description: |
  Knowing what species have been observed in a local area is a regular task for ecosystem management. Here we show how to add a buffer to a shapefile using {shapely} and {geopandas}. Then we use {galah-python} and {matplotlib} to demonstrate how data points that have been obfustcated (obscured by reducing their precision) may affect the size of a buffer in order to representatively capture species in the area.
  - name: "Amanda Buyan"
  - name: "Dax Kellie"
date: "2025-05-30"
title-block-banner: "#B8573E"
toc: true
toc-location: left
toc-depth: 2
categories:
  - Eukaryota
  - Animalia
  - Amphibia
  - Summaries
  - Python
# image: waffle-chart.png
freeze: true
engine: knitr
jupyter: python3
draft: true
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
library(htmltools)
```

<!-- remove metadata section -->
<style>
  #title-block-header.quarto-title-block.default .quarto-title-meta {
      display: none;
  }
</style>



<!-- Author card -->

:::{.author-card}
:::{.author-card-text}

#### Author
[Amanda Buyan](https://labs.ala.org.au/people/Buyan_Amanda/index.html)  
[Dax Kellie](https://labs.ala.org.au/people/Kellie_Dax/index.html)  

#### Date
12 February 2024

:::

:::{.author-card-image}
```{r, out.width='120px', out.extra='style="clip-path: circle();"', echo=FALSE}
knitr::include_graphics("https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/amanda.jpg")
```
:::

:::{.author-card-image}
```{r, out.width='120px', out.extra='style="clip-path: circle();"', echo=FALSE}
knitr::include_graphics("https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/dax.jpg")
```
:::

:::

<!------------------------ Post starts here ------------------------>

Ecological data is often used to understand what species are found in a given location. This information is a frequent requirement for conservation monitoring, and for environmental impact assessment prior to land development. A common method for this task is to use a **buffer**, an outward boundary around a given area location. Adding a buffer helps to capture all the species affected in an area of interest, including those that have been observed just outside an area and might live in or be affected by our area of interest.

Choosing a buffer size, however, can be tougher than it seems. Individual organisms move, either over the course of a day or an entire season (e.g., migration, perennial growth), so species' lifecycles and behaviours may determine the size of our final buffer. A more difficult challenge occurs when species are considered sensitive or endangered. These species' exact point locations are often obfuscated (generalised in precision) to keep these species safe. This added innaccuracy again affects our final decision on buffer size.

In this post, we'll show how to add a buffer around a shapefile with [`{geopandas}`](https://geopandas.org/en/stable/), [`{shapely}`](https://shapely.readthedocs.io/en/stable/) and [`{matplotlib}`](https://matplotlib.org/). Then we will use [`{galah-python}`](galah.ala.org.au/Python) to download data of Stuttering frogs (*Mixophyes balbus*) to demonstrate how the size of a buffer can affect the detection of sensitive species in an area.

# Draw a buffer

For our example, our area of interest is Mid-Western, a Local Government Area (LGA) in New South Wales.  It is located in the eastern portion of the state. 

```{python}
#| echo: false
#| eval: true
import geopandas as gpd
import matplotlib
import matplotlib.pyplot as plt
lgas = gpd.read_file("LGA_2024_AUST_GDA2020.zip")
ax = lgas[lgas['STE_NAME21'] == 'New South Wales'].plot(edgecolor = "#5A5A5A", linewidth = 0.5, facecolor = "white")
a = lgas[lgas['LGA_NAME24'] == 'Mid-Western'].plot(ax=ax,facecolor='#00008b')
a = ax.axis('off')
plt.show()
```

We'll first need to get a shapefile of our area, which we can get by downloading a [shapefile of all LGAs from the Australian Bureau of Statistics](https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files). Download the zip file of "Local Government Areas - 2024", then place the zip file in your local directory and unzip it.

We can then read in the shapefile and show what it looks like in `{geopandas}`.

```{python}
#| echo: true
#| eval: false
import geopandas as gpd
lgas = gpd.read_file("LGA_2024_AUST_GDA2020.zip")
lgas.head()
```

```{python}
#| echo: false
#| eval: true
import geopandas as gpd
import pandas as pd
pd.set_option('display.max_columns', None)
pd.set_option('expand_frame_repr', False)
lgas = gpd.read_file("../data/LGA_2024_AUST_GDA2020.zip")
lgas.head()
```

Next let's filter our `lgas` object to only Mid-Western and plot its shape using `{matplotlib}`. Conveniently, this functionality is built into both `{pandas}` and `{geopandas}` for straightforward plotting of `GeoDataFrame` data.

```{python}
midwestern = lgas[lgas['LGA_NAME24'] == 'Mid-Western']
midwestern.plot(edgecolor = "#5A5A5A", linewidth = 0.5, facecolor = "white")
```

## Creating a buffer 

Now, we will create a buffer.  This will involve converting the shapefiles between different Coordinate Reference Systems (CRS).  Check out [this section of a previous ALA Labs post](https://labs.ala.org.au/posts/2023-12-18_beginners-guide-make-a-map/#make-a-map) for a more complete explanation of what a CRS is.

## Comparing buffer size

Now, we will create a 5km buffer.  This will involve converting the shapefiles between different Coordinate Reference Systems (CRS)[^crs].

[^crs]: ALA data is projected using [CRS EPSG:4326](https://epsg.io/4326) (the same one used by Google Earth).

We want to draw our buffers in meters, not decimal degrees.  This is because we are looking at a relatively small area, and using length measurements is best.  To do this, we will complete the following steps for a range of buffers:

- convert your shape to a CRS which is measured in meters (we are using Australian Albers, EPSG:3577)
- add the buffer in meters (i.e. 5km = 5000)
- convert the buffer shape back to EPGS:4326 (the CRS the ALA uses)
- check to see if the buffers drawn around the shapes intersect; if they do, unify all the shapes that overlap into one

```{python}
# import relevant packages and declare variables
import shapely
from shapely.geometry import Polygon

# get shapefile into Australian Albers CRS
midwestern_meters = midwestern.to_crs(3577)

# loop over each buffer length to create the buffer
# then, convert it back to degrees for conformance with the ALA CRS and unify any overlapping shapes
buffer_5km = midwestern_meters['geometry'].buffer(5000)
gdf_buffer_5km_degrees = buffer_5km.to_crs(4326)
union_buffer_5km_degrees = shapely.unary_union(gdf_buffer_5km_degrees)
```

Now, we will plot our 5km buffer on a map to see how the overall shape changes.

```{python}
#| echo: true
#| eval: false
# import matplotlib for plotting
import matplotlib.pyplot as plt

# set initial shapefile as axis
ax = midwestern.plot(edgecolor = "black", linewidth = 2.0, facecolor = "white")

# loop over buffers and plot on the same axis as original shapefile
if type(union_buffer_5km_degrees) is Polygon:
    plt.plot(*union_buffer_5km_degrees.exterior.xy,c='#00008b',lw=2.0,label=length)
else:
    for j,geom in enumerate(union_buffer_5km_degrees.geoms):
        if j==0:
            plt.plot(*geom.exterior.xy,c='#00008b',lw=2.0,label=length)
        else:
            plt.plot(*geom.exterior.xy,c='#00008b',lw=2.0)

# remove axis to make plot look prettier
ax.axis('off')
```

```{python}
#| echo: false
#| eval: true
# import matplotlib for plotting
import matplotlib.pyplot as plt

# set initial shapefile as axis
ax = midwestern.plot(edgecolor = "black", linewidth = 2.0, facecolor = "white")

# loop over buffers and plot on the same axis as original shapefile
if type(union_buffer_5km_degrees) is Polygon:
    plt.plot(*union_buffer_5km_degrees.exterior.xy,c='#00008b',lw=2.0,label='5km')
else:
    for j,geom in enumerate(union_buffer_5km_degrees.geoms):
        if j==0:
            plt.plot(*union_buffer_5km_degrees.exterior.xy,c='#00008b',lw=2.0,label='5km')
        else:
            plt.plot(*union_buffer_5km_degrees.exterior.xy,c='#00008b',lw=2.0)

# remove axis
a = ax.axis('off')
plt.show();
```

# Obfuscation and why it's important for sensitive species

When we talk about a record being obfuscated, we mean that either ourselves or the data provider removes a specified number of decimal minutes so a species' exact location is not revealed.  This is done in accordance with the state or territory the species is located.  This means that the obfuscation is normally 1km, 10km or 50km.  Some records, if the species is very sensitive, may be witheld altogether.  One exception to this is data from iNaturalist, which comes pre-obfuscated at a 30km resolution.

What this means then is illustrated in the diagram below.  If an occurrence is obfuscated, it means that the species was spotted anywhere in a circle around that given point with a radius corresponding to how many decimal minutes are removed.  It could be in a shape you are using (left), in a buffered area around that given shape (middle), or completely outside of both shapes (right).

```{python}
#| echo: false
#| eval: true
fig,ax = plt.subplots(1,3)
from shapely.geometry import Point

for i in range(len(ax)):

    # plot initial shape and point
    a = midwestern.plot(ax=ax[i],edgecolor = "black", linewidth = 2.0, facecolor = "None", alpha = 1, figsize = (12,6))
    a = ax[i].plot(149.9,-33.15,'o',c='green')

    # create buffer around point
    point = gpd.GeoDataFrame({'geometry': Point([149.9,-33.15])},index=[0]).set_crs(4326)
    point_meters = point.to_crs(3577)
    buffered_point = point_meters['geometry'].buffer(50000)
    buffered_point_degrees = buffered_point.to_crs(4326)
    buffered_point_degrees.plot(ax=ax[i],edgecolor='orange',linewidth=2.0, facecolor='orange',alpha = 0.35)
    
    # buffer midwestern
    buffer = midwestern_meters['geometry'].buffer(25000)
    gdf_buffers_degrees = buffer.to_crs(4326)
    union_buffers_degrees = shapely.unary_union(gdf_buffers_degrees)
    
    if type(union_buffers_degrees) is Polygon:
        a = ax[i].plot(*union_buffers_degrees.exterior.xy,c='#00008b',lw=2.0,label=buffer)
    else:
        for j,geom in enumerate(union_buffers_degrees.geoms):
            if j==0:
                a = ax[i].plot(*geom.exterior.xy,c='#00008b',lw=2.0,label=length)
            else:
                a = ax[i].plot(*geom.exterior.xy,c='#00008b',lw=2.0)

    # add demonstration points
    if i == 0:
        a = ax[i].set_title('In Original Area',fontsize=10)
        a = ax[i].plot(149.8,-32.82,'o',c='purple')
    if i == 1:
        a = ax[i].set_title('In Buffer Area',fontsize=10)
        a = ax[i].plot(150.2,-33.03,'o',c='purple')
    if i == 2:
        a = ax[i].set_title('Outside Buffer Area',fontsize=10)
        a = ax[i].plot(149.7,-33.5,'o',c='purple')

    # set axis limits and remove numbers for better visualisation
    a = ax[i].set_ylim([-33.65,-31.7])
    a = ax[i].set_xlim([148.7,150.8])
    a = ax[i].axis('off')

plt.show()
```

# Looking at the sensitive species the Stuttering frog

Next, let's see an example of how buffer size affects our ability to detect sensitive species in our area of interest.

## Download obfuscated records of Stuttering Frog in bounding box

The Stuttering Frog (*Mixophyes balbus*) is a large Australian species of frog fhat inhabits temperate and sub-tropical rainforest and wet sclerophyll forest.  They have a brown back and a yellow underbelly, with a light blue iris that diffuses into gold above the pupil.  Another characteristic is a dark head stripe that starts before the nostril as a triangle, goes through the eye, and finishes over the shoulder. 

::: {layout-ncol="3" style="margin-left: auto; margin-right: auto;"}
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/3/7/1/1/67afd228-c7ce-4cae-94bf-fcd76baf1173/original" class="rounded"/></img>

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/a/6/9/8/5a8b9d78-cd00-4d64-b8c3-91521a3a896a/original" class="rounded"/></img>

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/1/d/b/7/f33896e7-e677-4f2d-8672-62ee7ed27bd1/original" class="rounded"/></img>
:::

::: figure-caption
Left: [*Mixophyes balbus* (Darren Fielder CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/e20b3c82-d995-4ad4-bed0-cd8769ec5b1f), 
Middle: [*Mixophyes balbus* (liznoble CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/62bf735b-6c70-410f-aea3-006d12fb011f), Right: [*Mixophyes balbus* (Matt Clancy CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/0d25faa5-694c-4e14-88c5-62863848cd6c)
:::

Now, we are going to download the occurrences of Stuttering Frog in a bounding box that encompasses a large area around the Mid-western LGA (min/max latitude:-33.7,-31.5; min/max longitude:148.5,151.1).

```{python}
#| echo: true
#| eval: false
import galah
import shapely
galah.galah_config(email="<your-email-address>")
#                              xmin,  ymin,  xmax,   ymax
bbox_midwestern = shapely.box(148.5, -33.6, 151.1, -31.6)
stuttering_frogs_midwestern = galah.atlas_occurrences(
    taxa='Mixophyes balbus',
    bbox=bbox_midwestern
)
```

```{python}
#| echo: false
#| eval: true
import galah
import shapely
galah.galah_config(email="amanda.buyan@csiro.au")
bbox_midwestern = shapely.box(148.5, -33.6, 151.1, -31.6)
stuttering_frogs_midwestern = galah.atlas_occurrences(
    taxa='Mixophyes balbus',
    bbox=bbox_midwestern
)
```

## Getting obfuscation data from New South Wales Sensitive Species List

As mentioned above, sensitive species in the ALA are obfuscated by an amount specified by the state where it is found. Thankfully, the ALA has up-to-date sensitive species list from each state and territory.  You can find out these values in `{galah-python}`.  First, however, we have to find the ID of the New South Wales sensitive species list.

```{python}
galah.search_all(lists="New South Wales")
```

As we can see from above, the list denoting New South Wales sensitive species has the ID `dr487`.  We can use that as our field in either the `show_values()` function or the `search_values()` function.  Since we are only looking for the Stuttering Frog, we are going to use `search_values()`, though you can download the entire sensitive list using the `show_values()` function.

:::{.callout-note collapse="true"}
`show_values()` is normally used for searching fields to narrow your query.  However, you can also use it to show what species are in a particular list on the ALA.  
:::

```{python}
galah.search_values(field='dr487',value='Mixophyes balbus',lists=True,include_statuses=True,column_name='scientificName')
```

## Create circles around occurrence points for better visual accuracy

Now, we know that in New South Wales, *Mixophyes balbus* is obfuscated to a radius of 10km.  Therefore, it is best to represent these occurrences as circles with radii 10km.  What we will do is remove the records without coordinates, convert our occurrences dataframe to a `GeoDataFrame`, and add a radius of 10km on each point.

```{python}
# drop entries without coordinates, as well as duplicates
stuttering_frogs_midwestern_unique_points = stuttering_frogs_midwestern.drop_duplicates(subset=['decimalLatitude','decimalLongitude']).dropna().reset_index(drop=True)

# change the pandas dataframe into a GeoDataFrame to add buffers
stuttering_frogs_midwestern_gdf = gpd.GeoDataFrame(
    stuttering_frogs_midwestern_unique_points, 
    geometry=gpd.points_from_xy(stuttering_frogs_midwestern_unique_points.decimalLongitude, stuttering_frogs_midwestern_unique_points.decimalLatitude), 
    crs="EPSG:4326"
)

# change the points to meters to add buffer
stuttering_frogs_midwestern_gdf_meters = stuttering_frogs_midwestern_gdf.to_crs(3577)

# add a buffer column to the same dataframe
stuttering_frogs_midwestern_gdf_meters['buffer'] = None
for i,row in stuttering_frogs_midwestern_gdf_meters.iterrows():
    stuttering_frogs_midwestern_gdf_meters.loc[i,'buffer'] = row["geometry"].buffer(10000)

# set the CRS again so GeoPandas knows what CRS the buffers are in
stuttering_frogs_midwestern_gdf_meters = stuttering_frogs_midwestern_gdf_meters.set_crs(3577)

# remove the geometry column and replace it with the buffered points
del(stuttering_frogs_midwestern_gdf_meters['geometry'])
stuttering_frogs_midwestern_gdf_meters = stuttering_frogs_midwestern_gdf_meters.rename(columns={'buffer': 'geometry'})

# set the CRS again so GeoPandas knows what CRS the buffers are in
stuttering_frogs_midwestern_gdf_meters = stuttering_frogs_midwestern_gdf_meters.set_crs(3577)

# change the points back to EPSG:4326 for parity with shape file
stuttering_frogs_midwestern_gdf_buffer_degrees = stuttering_frogs_midwestern_gdf_meters.to_crs(4326)
```

Now that we have added the 10km radius to all the points, let's plot them to see what our data looks like now.

```{python}
stuttering_frogs_midwestern_gdf_buffer_degrees.plot(facecolor='orange',alpha=0.15,linewidth=1.0, edgecolor='orange')
```

## What different buffer sizes can show

Now that we have drawn a buffer around our shape file and have gotten our Stuttering Frog occurrences, let's consider what different buffer sizes can do in your ability to detect sensitive species around an area.  This figure here shows how many unique points are detected for *Mixophyes balbus* as you increase the buffer size.  If you wanted to be sure that you have gotten the two locationsof the Stuttering Frog, 25km is likely a good enough buffer to draw.

Why would you not want to draw a large buffer? One thing to consider is that, the larger the buffer you draw, the more likely it is that your environment could change.  For example, if you were looking at a small wetlands reserve, a smaller buffer may be sufficient, especially if the environment around it changes.  If you were doing an Impact Assessment, you may be answering a different question, and therefore may need to change your buffer size.

```{python}
#| echo: true
#| eval: false
#| code-fold: true
fig,ax = plt.subplots(2,3) #,figsize=(15,10))
extra = 0

# initialise buffer data for visualisation
buffer_shapes = {}
buffer_lengths = {"5km": 5000, "10km": 10000,"15km": 15000,"20km": 20000,"25km": 25000,"30km": 30000}
buffer_distances = list(buffer_lengths.keys())

# get shapefile into Australian Albers CRS
midwestern_meters = midwestern.to_crs(3577)

# loop over each buffer length to create the buffer
# then, convert it back to degrees for conformance with the ALA CRS and unify any overlapping shapes
for length in buffer_lengths:
  buffer = midwestern_meters['geometry'].buffer(buffer_lengths[length])
  gdf_buffers_degrees = buffer.to_crs(4326)
  union_buffers_degrees = shapely.unary_union(gdf_buffers_degrees)
  buffer_shapes[length] = union_buffers_degrees

# loop over all aces for plotting
for i in range(len(ax)):
    for j in range(len(ax[i])):

        # plot circles on map for reference
        stuttering_frogs_midwestern_gdf_buffer_degrees.plot(
            ax=ax[i][j],facecolor='#d4af37',alpha=0.5,linewidth=2.0, edgecolor='#d4af37',label='label'
        ) 

        # if it is first plot, there are
        if i == 0 and j == 0:

            # there is no buffer; plot the original shape file
            ax[i][j].set_title("No Buffer",fontsize=14)
            midwestern.plot(ax=ax[i][j],edgecolor = "black", linewidth = 2.0, facecolor = "None")

            # get count of 
            count=galah.atlas_occurrences(taxa='Mixophyes balbus',polygon=midwestern['geometry'][74]).drop_duplicates(subset=['decimalLatitude','decimalLongitude']).dropna().reset_index(drop=True)
            ax[i][j].text(150.2,-31.85,'Count={}'.format(count.shape[0]),fontsize=12,color='#6E260E')

        # else, draw buffer around shape and plot it
        else:

            # get buffer 
            buffer = buffer_distances[i+j+extra-1]
            
            # set title and plot original shape
            ax[i][j].set_title("{} Buffer".format(buffer),fontsize=14)
            midwestern.plot(ax=ax[i][j],edgecolor = "black", linewidth = 2.0, facecolor = "None", alpha = 1)

            # get raw number of sensitive species, drop duplicates and records without lat/long
            count=galah.atlas_occurrences(taxa='Mixophyes balbus',polygon=buffer_shapes[buffer]).drop_duplicates(subset=['decimalLatitude','decimalLongitude']).dropna().reset_index(drop=True)

            # add number of counts to graph for reference
            ax[i][j].text(150.2,-31.85,'Count={}'.format(count.shape[0]),fontsize=12,color='#6E260E')
            
            # draw buffer on plot
            if type(buffer_shapes[buffer]) is Polygon:
                ax[i][j].plot(*buffer_shapes[buffer].exterior.xy,c='#00008b',lw=2.0,label=buffer)
            else:
                for j,geom in enumerate(buffer_shapes[buffer].geoms):
                    if j==0:
                        ax[i][j].plot(*geom.exterior.xy,c='#00008b',lw=2.0,label=length)
                    else:
                        ax[i][j].plot(*geom.exterior.xy,c='#00008b',lw=2.0)

        # change limits of graph and set whitespace for better looking plot
        ax[i][j].set_ylim([-33.75,-31.7])
        ax[i][j].set_xlim([148.7,150.8])
        plt.setp(ax[i][j].get_xticklabels(), visible=False)
        plt.setp(ax[i][j].get_xticklines(), visible=False)
        plt.setp(ax[i][j].get_yticklabels(), visible=False)
        plt.setp(ax[i][j].get_yticklines(), visible=False)
        ax[i][j].set_aspect('equal')
        plt.subplots_adjust(wspace=0, hspace=0.15)

    # ensure that we get subplots on both lines of the overall plot
    extra += 3
```

```{python}
#| echo: false
#| eval: true

# set axis here
fig,ax = plt.subplots(2,3,figsize=(15,10))
extra = 0

# initialise buffer data for visualisation
buffer_shapes = {}
buffer_lengths = {"5km": 5000, "10km": 10000,"15km": 15000,"20km": 20000,"25km": 25000,"30km": 30000}
buffer_distances = list(buffer_lengths.keys())

# get shapefile into Australian Albers CRS
midwestern_meters = midwestern.to_crs(3577)

# loop over each buffer length to create the buffer
# then, convert it back to degrees for conformance with the ALA CRS and unify any overlapping shapes
for length in buffer_lengths:
  buffer = midwestern_meters['geometry'].buffer(buffer_lengths[length])
  gdf_buffers_degrees = buffer.to_crs(4326)
  union_buffers_degrees = shapely.unary_union(gdf_buffers_degrees)
  buffer_shapes[length] = union_buffers_degrees

# loop over all aces for plotting
for i in range(len(ax)):
    for j in range(len(ax[i])):

        # plot circles on map for reference
        a = stuttering_frogs_midwestern_gdf_buffer_degrees.plot(
            ax=ax[i][j],facecolor='#d4af37',alpha=0.5,linewidth=2.0, edgecolor='#d4af37',label='label'
        ) 

        # if it is first plot, there are
        if i == 0 and j == 0:

            # there is no buffer; plot the original shape file
            a = ax[i][j].set_title("No Buffer",fontsize=24)
            a = midwestern.plot(ax=ax[i][j],edgecolor = "black", linewidth = 2.0, facecolor = "None")

            # get count of 
            count=galah.atlas_occurrences(taxa='Mixophyes balbus',polygon=midwestern['geometry'][74]).drop_duplicates(subset=['decimalLatitude','decimalLongitude']).dropna().reset_index(drop=True)
            a = ax[i][j].text(150.05,-31.85,'Count={}'.format(count.shape[0]),fontsize=20,color='#6E260E')

        # else, draw buffer around shape and plot it
        else:

            # get buffer 
            buffer = buffer_distances[i+j+extra-1]
            
            # set title and plot original shape
            a = ax[i][j].set_title("{} Buffer".format(buffer),fontsize=24)
            a = midwestern.plot(ax=ax[i][j],edgecolor = "black", linewidth = 2.0, facecolor = "None", alpha = 1)

            # get raw number of sensitive species, drop duplicates and records without lat/long
            count=galah.atlas_occurrences(taxa='Mixophyes balbus',polygon=buffer_shapes[buffer]).drop_duplicates(subset=['decimalLatitude','decimalLongitude']).dropna().reset_index(drop=True)

            # add number of counts to graph for reference
            a = ax[i][j].text(150.05,-31.85,'Count={}'.format(count.shape[0]),fontsize=20,color='#6E260E')
            
            # draw buffer on plot
            if type(buffer_shapes[buffer]) is Polygon:
                a = ax[i][j].plot(*buffer_shapes[buffer].exterior.xy,c='#00008b',lw=2.0,label=buffer)
            else:
                for j,geom in enumerate(buffer_shapes[buffer].geoms):
                    if j==0:
                        a = ax[i][j].plot(*geom.exterior.xy,c='#00008b',lw=2.0,label=length)
                    else:
                        a = ax[i][j].plot(*geom.exterior.xy,c='#00008b',lw=2.0)

        # change limits of graph and set whitespace for better looking plot
        a = ax[i][j].set_ylim([-33.75,-31.7])
        a = ax[i][j].set_xlim([148.7,150.8])
        a = plt.setp(ax[i][j].get_xticklabels(), visible=False)
        a = plt.setp(ax[i][j].get_xticklines(), visible=False)
        a = plt.setp(ax[i][j].get_yticklabels(), visible=False)
        a = plt.setp(ax[i][j].get_yticklines(), visible=False)
        a = ax[i][j].set_aspect('equal')
        plt.subplots_adjust(wspace=0, hspace=0.15)
    # ensure that we get subplots on both lines of the overall plot
    extra += 3

# show the plot
plt.show()
```

# Final thoughts

We hope this post has helped you understand how to draw buffers around a shape, as well as the importance of considering the buffer size when looking for sensitive species. It is possible to do this for conserved species, as well as for all species on a species list.

For other Python posts, check out [our beginner’s guide to map species observations](https://labs.ala.org.au/posts/2023-12-18_beginners-guide-make-a-map/) or see [how to cross reference a species list with a conservation list](https://labs.ala.org.au/posts/2024-02-12_species-lists/).

<details><summary style = "color: #E06E53;">Expand for session info</summary>

```{r, echo = FALSE}
library(sessioninfo)
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")
# print it out
pkg_sesh
```

</details>
