---
title: "Why buffers matter when looking for sensitive species"
description: |
  Knowing what species have been observed in a local area is a regular task for ecosystem management. Here we show how to add a buffer to a shapefile using {shapely} and {geopandas}, then use {galah-python} to get obfuscated locations of the sensitive species Stuttering Frog in the area. We then show how to visualise this information using {matplotlib}.
author:
  - name: "Amanda Buyan"
  - name: "Dax Kellie"
date: "2024-11-12"
title-block-banner: "#B8573E"
toc: true
toc-location: left
toc-depth: 2
categories:
  - Eukaryota
  - Summaries
  - Python
# image: waffle-chart.png
freeze: true
engine: knitr
jupyter: python3
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
library(htmltools)
```

<!-- remove metadata section -->
<style>
  #title-block-header.quarto-title-block.default .quarto-title-meta {
      display: none;
  }
</style>



<!-- Author card -->

:::{.author-card}
:::{.author-card-text}

#### Author
[Amanda Buyan](https://labs.ala.org.au/people/Buyan_Amanda/index.html)  
[Dax Kellie](https://labs.ala.org.au/people/Kellie_Dax/index.html)  

#### Date
12 February 2024

:::

:::{.author-card-image}
```{r, out.width='120px', out.extra='style="clip-path: circle();"', echo=FALSE}
knitr::include_graphics("https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/amanda.jpg")
```
:::

:::{.author-card-image}
```{r, out.width='120px', out.extra='style="clip-path: circle();"', echo=FALSE}
knitr::include_graphics("https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/dax.jpg")
```
:::

:::

<!------------------------ Post starts here ------------------------>

Buffers are a ubiquitous yet useful tool in ecology, as they allow us to take into account a species' movements and the influence of its surrounding environment. Considering the wildlife living just outside of the area, which may have been observed in the area in question, gives a richer understanding of the biodiversity of an area.  This is especially pertinent in area assessments prior to land development.  Determining not only what species are in the area slated for land development, but also what species directly outside the development will be affected, is important for biodiversity and wildlife considerations.  

One consideration for area assessments is what sensitive species are in a place being considered for development.  In the ALA, a sensitive species' exact location is obfuscated according to each state's specifications, which includes factors like limited habitat range, rarity and desirability.  This allows individuals to determine if something sensitive has been seen in the area, but protect the species in question from being actively sought out.

In this post, we discuss and show how carefully considering the size of your buffers can affect the detection of sensitive species in the area and lead to a more complete area assessment.  This will be using `{galah-python}`, `{geopandas}`, `{shapely}`, and `{matplotlib}` to add a buffer around a shapefile, specifically the Mid-western Local Government Area, and show how different buffer sizes capture the areas where Stuttering Frogs have been spotted.

# Drawing buffers around shapefile

## Initial plotting of shapefile

For this example, we will be using the Local Government Areas (LGAs) shapefile provided by the Australian Bureau of Statistics (download it at the Digital Boundary Files page [here](https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files)).  To get started, we will read in the shapefile and show what it looks like in `{geopandas}`.

```{python}
#| echo: true
#| eval: false
import geopandas as gpd
lgas = gpd.read_file("LGA_2024_AUST_GDA2020.zip")
lgas.head()
```

```{python}
#| echo: false
#| eval: true
import geopandas as gpd
import pandas as pd
pd.set_option('display.max_columns', None)
pd.set_option('expand_frame_repr', False)
lgas = gpd.read_file("../data/LGA_2024_AUST_GDA2020.zip")
lgas.head()
```

Now we will be selecting the `GeoDataFrame` row denoting the Mid-western LGA, and plot its shape using `{matplotlib}`.  This functionality is built into both `{pandas}` and `{geopandas}` for straightforward plotting of `GeoDataFrame` data.

```{python}
midwestern = lgas[lgas['LGA_NAME24'] == 'Mid-Western']
midwestern.plot(edgecolor = "#5A5A5A", linewidth = 0.5, facecolor = "white")
```

## Creating Different Buffers

Now, we will create different sized buffers.  This will involve converting the shapefiles between different Coordinate Reference Systems (CRSs).

:::callout-note
Coordinate Reference Systems (CRSs) is a two-dimensional representation of three-dimensional coordinates.  A modern application is navigation using a GPS, which takes into account the curvature of the Earth to give you an accurate idea of your location.  The ALA uses the same CRS as modern GPSs, which is EPSG:4326 (also known as WGS84).  Keeping this is mind is crucial when using a shapefile to download data from the ALA.
:::

We want to draw our buffers in meters, not decimal degrees.  This is because we are looking at a relatively small area, and using length measurements is best.  To do this, we will complete the following steps for a range of buffers:

- convert your shape to a CRS which is measured in meters (we are using Australian Albers, EPSG:3577)
- add the buffer in meters (i.e. 1km = 1000)
- convert the buffer shape back to EPGS:4326 (what the ALA uses)
- check to see if the buffers drawn around the shapes intersect; if they do, unify all the shapes that overlap into one

For this next example, we will be using various buffers, from 5km to 30km, to illustrate how to draw multiple buffers around a shapefile.

```{python}
# import relevant packages and declare variables
import shapely
from shapely.geometry import Polygon

# initialise buffer data
buffer_shapes = {}
buffer_lengths = {"5km": 5000, "10km": 10000,"15km": 15000,"20km": 20000,"25km": 25000,"30km": 30000}
buffer_distances = list(buffer_lengths.keys())

# get shapefile into Australian Albers CRS
midwestern_meters = midwestern.to_crs(3577)

# loop over each buffer length to create the buffer
# then, convert it back to degrees for conformance with the ALA CRS and unify any overlapping shapes
for length in buffer_lengths:
  buffer = midwestern_meters['geometry'].buffer(buffer_lengths[length])
  gdf_buffers_degrees = buffer.to_crs(4326)
  union_buffers_degrees = shapely.unary_union(gdf_buffers_degrees)
  buffer_shapes[length] = union_buffers_degrees
```

Now, we will plot all the buffers on a map to see how the overall shape changes.

```{python}
#| echo: true
#| eval: false
# import matplotlib for plotting
import matplotlib.pyplot as plt

# set initial shapefile as axis
ax = midwestern.plot(edgecolor = "black", linewidth = 2.0, facecolor = "white")

# set custom colours for buffers
colors = ['#00008b','#231d7d','#473a6f','#6a5861','#8d7553','#b19245','#d4af37']

# loop over buffers and plot on the same axis as original shapefile
for i,length in enumerate(buffer_lengths):
    if type(buffer_shapes[length]) is Polygon:
        plt.plot(*buffer_shapes[length].exterior.xy,c=colors[i],lw=2.0,label=length)
    else:
      for j,geom in enumerate(buffer_shapes[length].geoms):
        if j==0:
          plt.plot(*geom.exterior.xy,c=colors[i],lw=2.0,label=length)
        else:
          plt.plot(*geom.exterior.xy,c=colors[i],lw=2.0)

# add legend, set x and y lims, and remove ticks to make plot look prettier
plt.title('Buffers Around Mid-Western')
plt.legend(fontsize=8,loc='upper right')
ax.set_ylim([-33.6,-31.6])
ax.set_xlim([148.5,151.1])
plt.setp(ax.get_xticklabels(), visible=False)
plt.setp(ax.get_xticklines(), visible=False)
plt.setp(ax.get_yticklabels(), visible=False)
plt.setp(ax.get_yticklines(), visible=False)
```

```{python}
#| echo: false
#| eval: true
# import matplotlib for plotting
import matplotlib.pyplot as plt

# set initial shapefile as axis
ax = midwestern.plot(edgecolor = "black", linewidth = 2.0, facecolor = "white")

# set custom colours for buffers
colors = ['#00008b','#231d7d','#473a6f','#6a5861','#8d7553','#b19245','#d4af37']

# loop over buffers and plot on the same axis as original shapefile
for i,length in enumerate(buffer_lengths):
    if type(buffer_shapes[length]) is Polygon:
        plt.plot(*buffer_shapes[length].exterior.xy,c=colors[i],lw=2.0,label=length)
    else:
      for j,geom in enumerate(buffer_shapes[length].geoms):
        if j==0:
          plt.plot(*geom.exterior.xy,c=colors[i],lw=2.0,label=length)
        else:
          plt.plot(*geom.exterior.xy,c=colors[i],lw=2.0)

# add legend, set x and y lims, and remove ticks to make plot look prettier
plt.title('Buffers Around Mid-Western')
plt.legend(fontsize=8,loc='upper right')
ax.set_ylim([-33.6,-31.6]);
ax.set_xlim([148.5,151.1]);
plt.setp(ax.get_xticklabels(), visible=False);
plt.setp(ax.get_xticklines(), visible=False);
plt.setp(ax.get_yticklabels(), visible=False);
plt.setp(ax.get_yticklines(), visible=False);
plt.show();
```

# Downloading records of Giant Barred Frog

The Stuttering Frog (*Mixophyes balbus*) is large Australian species of frog fhat inhabits temperate and sub-tropical rainforest and wet sclerophyll forest.  They have a brown back and a yellow underbelly, with a light blue iris that diffuses into gold above the pupil.  Another characteristic is a dark head stripe that starts before the nostril as a triangle, goes through the eye, and finishes over the shoulder. 

::: {layout-ncol="3" style="margin-left: auto; margin-right: auto;"}
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/3/7/1/1/67afd228-c7ce-4cae-94bf-fcd76baf1173/original" class="rounded"/></img>

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/a/6/9/8/5a8b9d78-cd00-4d64-b8c3-91521a3a896a/original" class="rounded"/></img>

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/1/d/b/7/f33896e7-e677-4f2d-8672-62ee7ed27bd1/original" class="rounded"/></img>
:::

::: figure-caption
Left: [*Mixophyes balbus* (Darren Fielder CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/e20b3c82-d995-4ad4-bed0-cd8769ec5b1f), 
Middle: [*Mixophyes balbus* (liznoble CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/62bf735b-6c70-410f-aea3-006d12fb011f), Right: [*Mixophyes balbus* (Matt Clancy CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/0d25faa5-694c-4e14-88c5-62863848cd6c)
:::

Now, we are going to download the occurrences of Stuttering Frog in the bounding box specified by the buffers graph above (min/max latitude:-33.7,-31.5; min/max longitude:148.5,151.1).

```{python}
#| echo: true
#| eval: false
import galah
import shapely
galah.galah_config(email="<your-email-address>")
#                         xmin, ymin, xmax, ymax
bbox_midwestern = shapely.box(148.5, -33.6, 151.1, -31.6)
stuttering_frogs_midwestern = galah.atlas_occurrences(
    taxa='Mixophyes balbus',
    bbox=bbox_midwestern
)
```

```{python}
#| echo: false
#| eval: true
import galah
import shapely
galah.galah_config(email="amanda.buyan@csiro.au")
bbox_midwestern = shapely.box(148.5, -33.6, 151.1, -31.6)
stuttering_frogs_midwestern = galah.atlas_occurrences(
    taxa='Mixophyes balbus',
    bbox=bbox_midwestern
)
```

As mentioned before, sensitive species are obfuscated in the ALA by an amount specified by the state it is found. Thankfully, the ALA has up-to-date sensitive species list from each state and territory.  You can find out these values in `{galah-python}`.  First, however, we have to find the ID of the New South Wales sensitive species list.

```{python}
galah.search_all(lists="New South Wales")
```

As we can see from above, the list denoting New South Wales sensitive species has the ID `dr487`.  We can use that as our field in either the `show_values()` function or the `search_values()` function.  Since we are only looking for the Stuttering Frog, we are going to use `search_values()`, though you can download the entire sensitive list using the `show_values()` function.

:::callout-note
`show_values()` is normally used for searching fields to narrow your query.  However, you can also use it to show what species are in a particular list on the ALA.  
:::

```{python}
galah.search_values(field='dr487',value='Mixophyes balbus',lists=True,include_statuses=True,column_name='scientificName')
```

Now, we know that in New South Wales, *Mixophyes balbus* is obfuscated to a 10km radius.  This does not mean that the center of the point is where the species has been spotted; it instead means that the species has been spotted somewhere in that 10km radius.  Therefore, it is best to represent them as circles with radii 10km.  What we will do is remove the records without coordinates, convert our occurrences dataframe to a `GeoDataFrame`, and add a radius of 10km on each point.

```{python}
# drop entries without coordinates, as well as duplicates
stuttering_frogs_midwestern_unique_points = stuttering_frogs_midwestern.drop_duplicates(subset=['decimalLatitude','decimalLongitude']).dropna().reset_index(drop=True)

# change the pandas dataframe into a GeoDataFrame to add buffers
stuttering_frogs_midwestern_gdf = gpd.GeoDataFrame(
    stuttering_frogs_midwestern_unique_points, 
    geometry=gpd.points_from_xy(stuttering_frogs_midwestern_unique_points.decimalLongitude, stuttering_frogs_midwestern_unique_points.decimalLatitude), 
    crs="EPSG:4326"
)

# change the points to meters to add buffer
stuttering_frogs_midwestern_gdf_meters = stuttering_frogs_midwestern_gdf.to_crs(3577)

# add a buffer column to the same dataframe
stuttering_frogs_midwestern_gdf_meters['buffer'] = None
for i,row in stuttering_frogs_midwestern_gdf_meters.iterrows():
    stuttering_frogs_midwestern_gdf_meters.loc[i,'buffer'] = row["geometry"].buffer(buffer_lengths['10km'])

# set the CRS again so GeoPandas knows what CRS the buffers are in
stuttering_frogs_midwestern_gdf_meters = stuttering_frogs_midwestern_gdf_meters.set_crs(3577)

# remove the geometry column and replace it with the buffered points
del(stuttering_frogs_midwestern_gdf_meters['geometry'])
stuttering_frogs_midwestern_gdf_meters = stuttering_frogs_midwestern_gdf_meters.rename(columns={'buffer': 'geometry'})

# set the CRS again so GeoPandas knows what CRS the buffers are in
stuttering_frogs_midwestern_gdf_meters = stuttering_frogs_midwestern_gdf_meters.set_crs(3577)

# change the points back to EPSG:4326 for parity with shape file
stuttering_frogs_midwestern_gdf_buffer_degrees = stuttering_frogs_midwestern_gdf_meters.to_crs(4326)
```

Now that we have added the 10km radius to all the points, let's plot it to see what the points look like.

```{python}
stuttering_frogs_midwestern_gdf_buffer_degrees.plot(facecolor='orange',alpha=0.15,linewidth=1.0, edgecolor='orange')
```

# Plotting both together

Finally, we can plot all of the buffers and points to see how the addition of a buffer can include relevant points in your spatial search.

```{python}
#| echo: true
#| eval: false
#| code-fold: true
fig,ax = plt.subplots(2,3,figsize=(10,6))
extra = 0

for i in range(len(ax)):
    for j in range(len(ax[i])):
        stuttering_frogs_midwestern_gdf_buffer_degrees.plot(
            ax=ax[i][j],facecolor='#d4af37',alpha=0.5,linewidth=2.0, edgecolor='#d4af37',label='label'
        ) 
        if i == 0 and j == 0:
            ax[i][j].set_title("No Buffer",fontsize=14)
            midwestern.plot(ax=ax[i][j],edgecolor = "black", linewidth = 2.0, facecolor = "None", figsize = (12,6))
            count=galah.atlas_occurrences(taxa='Mixophyes balbus',polygon=midwestern['geometry'][74]).drop_duplicates(subset=['decimalLatitude','decimalLongitude']).dropna().reset_index(drop=True)
            ax[i][j].text(150.2,-31.85,'Count={}'.format(count.shape[0]),fontsize=12,color='#6E260E')
        else:
            buffer = buffer_distances[i+j+extra-1]
            ax[i][j].set_title("{} Buffer".format(buffer),fontsize=14)
            midwestern.plot(ax=ax[i][j],edgecolor = "black", linewidth = 2.0, facecolor = "None", alpha = 1, figsize = (12,6))
            count=galah.atlas_occurrences(taxa='Mixophyes balbus',polygon=buffer_shapes[buffer]).drop_duplicates(subset=['decimalLatitude','decimalLongitude']).dropna().reset_index(drop=True)
            ax[i][j].text(150.2,-31.85,'Count={}'.format(count.shape[0]),fontsize=12,color='#6E260E')
            if type(buffer_shapes[buffer]) is Polygon:
                ax[i][j].plot(*buffer_shapes[buffer].exterior.xy,c='#00008b',lw=2.0,label=buffer)
            else:
                for j,geom in enumerate(buffer_shapes[buffer].geoms):
                    if j==0:
                        ax[i][j].plot(*geom.exterior.xy,c='#00008b',lw=2.0,label=length)
                    else:
                        ax[i][j].plot(*geom.exterior.xy,c='#00008b',lw=2.0)
        ax[i][j].set_ylim([-33.75,-31.7])
        ax[i][j].set_xlim([148.7,150.8])
        plt.setp(ax[i][j].get_xticklabels(), visible=False)
        plt.setp(ax[i][j].get_xticklines(), visible=False)
        plt.setp(ax[i][j].get_yticklabels(), visible=False)
        plt.setp(ax[i][j].get_yticklines(), visible=False)
        ax[i][j].set_aspect('equal')
        plt.subplots_adjust(wspace=0, hspace=0.15)
    extra += 3
```

```{python}
#| echo: false
#| eval: true

# set axis here
fig,ax = plt.subplots(2,3,figsize=(10,6))
extra = 0

for i in range(len(ax)):
    for j in range(len(ax[i])):
        a = stuttering_frogs_midwestern_gdf_buffer_degrees.plot(
            ax=ax[i][j],facecolor='#d4af37',alpha=0.5,linewidth=2.0, edgecolor='#d4af37',label='label'
        )
        if i == 0 and j == 0:
            a = ax[i][j].set_title("No Buffer",fontsize=14)
            a = midwestern.plot(ax=ax[i][j],edgecolor = "black", linewidth = 2.0, facecolor = "None", figsize = (12,6))
            count=galah.atlas_occurrences(taxa='Mixophyes balbus',polygon=midwestern['geometry'][74]).drop_duplicates(subset=['decimalLatitude','decimalLongitude']).dropna().reset_index(drop=True)
            a = ax[i][j].text(150.08,-31.85,'Count={}'.format(count.shape[0]),fontsize=12,color='#6E260E')
        else:
            buffer = buffer_distances[i+j+extra-1]
            a = ax[i][j].set_title("{} Buffer".format(buffer),fontsize=14)
            a = midwestern.plot(ax=ax[i][j],edgecolor = "black", linewidth = 2.0, facecolor = "None", alpha = 1, figsize = (12,6))
            count=galah.atlas_occurrences(taxa='Mixophyes balbus',polygon=buffer_shapes[buffer]).drop_duplicates(subset=['decimalLatitude','decimalLongitude']).dropna().reset_index(drop=True)
            a = ax[i][j].text(150.08,-31.85,'Count={}'.format(count.shape[0]),fontsize=12,color='#6E260E')
            if type(buffer_shapes[buffer]) is Polygon:
                a = ax[i][j].plot(*buffer_shapes[buffer].exterior.xy,c='#00008b',lw=2.0,label=buffer)
            else:
                for j,geom in enumerate(buffer_shapes[buffer].geoms):
                    if j==0:
                        a = ax[i][j].plot(*geom.exterior.xy,c='#00008b',lw=2.0,label=length)
                    else:
                        a = ax[i][j].plot(*geom.exterior.xy,c='#00008b',lw=2.0)
        a = ax[i][j].set_ylim([-33.75,-31.7])
        a = ax[i][j].set_xlim([148.7,150.8])
        a = plt.setp(ax[i][j].get_xticklabels(), visible=False)
        a = plt.setp(ax[i][j].get_xticklines(), visible=False)
        a = plt.setp(ax[i][j].get_yticklabels(), visible=False)
        a = plt.setp(ax[i][j].get_yticklines(), visible=False)
        a = ax[i][j].set_aspect('equal')
        plt.subplots_adjust(wspace=0, hspace=0.15)
    extra += 3
plt.show()
```

# Final thoughts

We hope this post has helped you understand how to draw buffers around a shape, as well as the importance of considering the buffer size when looking for sensitive species. It is possible to do this for conserved species, as well as for all species on a species list.

For other Python posts, check out [our beginner’s guide to map species observations](https://labs.ala.org.au/posts/2023-12-18_beginners-guide-make-a-map/) or see [how to cross reference a species list with a conservation list](https://labs.ala.org.au/posts/2024-02-12_species-lists/).

<details><summary style = "color: #E06E53;">Expand for session info</summary>

```{r, echo = FALSE}
library(sessioninfo)
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")
# print it out
pkg_sesh
```

</details>
