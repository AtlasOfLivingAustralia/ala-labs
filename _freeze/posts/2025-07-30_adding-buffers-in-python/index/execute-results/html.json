{
  "hash": "b7e87628966047281d0193c927f59de9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Add a buffer to a shapefile and account for generalised species locations\"\ndescription: |\n  Knowing what species have been observed in a local area is a regular task for ecosystem management. Here we show how to add a buffer to a shapefile using {shapely} and {geopandas}. We then demonstrate how data that have been obfuscated (generalised by reducing their precision) may affect the buffer size required to more confidently capture threatened species in the area using {galah-python} and {matplotlib}.\nauthors:\n  - name: \"Amanda Buyan\"\n  - name: \"Dax Kellie\"\ndate: \"2025-07-30\"\ntitle-block-banner: \"#B8573E\"\ntoc: true\ntoc-location: left\ntoc-depth: 2\ncategories:\n  - Eukaryota\n  - Animalia\n  - Amphibia\n  - Summaries\n  - Python\nimage: obfuscate.png\nfreeze: true\nengine: knitr\njupyter: python3\ndraft: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\n<!-- remove metadata section -->\n<style>\n  #title-block-header.quarto-title-block.default .quarto-title-meta {\n      display: none;\n  }\n</style>\n\n\n\n<!-- Author card -->\n\n:::{.author-card}\n:::{.author-card-text}\n\n#### Author\n[Amanda Buyan](https://labs.ala.org.au/people/Buyan_Amanda/index.html)  \n[Dax Kellie](https://labs.ala.org.au/people/Kellie_Dax/index.html)  \n\n#### Date\n7 July 2025\n\n:::\n\n:::{.author-card-image}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/amanda.jpg){width=120px style=\"clip-path: circle();\"}\n:::\n:::\n\n\n:::\n\n:::{.author-card-image}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/dax.jpg){width=120px style=\"clip-path: circle();\"}\n:::\n:::\n\n\n:::\n\n:::\n\n<!------------------------ Post starts here ------------------------>\n\nEcological data is often used to understand what species are found in a given location, especially for conservation monitoring and environmental impact assessment prior to land development. A common method for this task is to use a **buffer**, an outward boundary around a given area location. Adding a buffer helps to capture all the species in an area, including those that have been observed just outside the area and probably live there, too.\n\nChoosing a buffer size, however, can be tougher than it seems. Individual organisms move, either over the course of a day or an entire season (e.g. migration, perennial growth), so species' lifecycles and behaviours may determine the size of our final buffer. A more difficult challenge occurs when species are considered sensitive or endangered. These species' exact point locations are often obfuscated (aka their location is made less precise) to keep these species safe. This added imprecision will again affect our final decision on buffer size.\n\nIn this post, we'll show how to add a buffer around a shapefile with [{geopandas}](https://geopandas.org/en/stable/), [{shapely}](https://shapely.readthedocs.io/en/stable/) and [{matplotlib}](https://matplotlib.org/). Then we will use [{galah-python}](galah.ala.org.au/Python) to download data of Stuttering frogs (*Mixophyes balbus*) to demonstrate how the size of a buffer can affect the detection of sensitive species in an area.  Lastly, we will use [{scipy}](https://docs.scipy.org/doc/scipy/#) and [{matplotlib}](https://matplotlib.org/) to show the effect of buffers on detecting threatened species in an area.\n\n# Draw a buffer\n\nFor this example, our area of interest is Mid-Western, a Local Government Area (LGA) in New South Wales. We'll first need to download a shapefile of our area, which we can get by downloading a [shapefile of all LGAs from the Australian Bureau of Statistics](https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files) and filtering to our area. Download the zip file of \"Local Government Areas - 2024\", then place the zip file in your local directory. We can then read in the shapefile and show what it looks like using {geopandas}.\n\n::: aside\n\nFor those unfamiliar with Australian geography, the LGA of Mid-Western is located here:\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport geopandas as gpd\nimport shapely\nfrom shapely.geometry import Polygon\nlgas = gpd.read_file(\"LGA_2024_AUST_GDA2020.zip\")\nlgas.head()\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n  LGA_CODE24 LGA_NAME24 STE_CODE21       STE_NAME21 AUS_CODE21 AUS_NAME21    AREASQKM                                         LOCI_URI21                                           geometry\n0      10050     Albury          1  New South Wales        AUS  Australia    305.6386  https://linked.data.gov.au/dataset/asgsed3/LGA...  POLYGON ((146.86566 -36.07292, 146.86512 -36.0...\n1      10180   Armidale          1  New South Wales        AUS  Australia   7809.4406  https://linked.data.gov.au/dataset/asgsed3/LGA...  POLYGON ((152.38816 -30.52639, 152.38812 -30.5...\n2      10250    Ballina          1  New South Wales        AUS  Australia    484.9692  https://linked.data.gov.au/dataset/asgsed3/LGA...  MULTIPOLYGON (((153.57106 -28.87381, 153.57106...\n3      10300  Balranald          1  New South Wales        AUS  Australia  21690.7493  https://linked.data.gov.au/dataset/asgsed3/LGA...  POLYGON ((143.00433 -33.78164, 143.01538 -33.7...\n4      10470   Bathurst          1  New South Wales        AUS  Australia   3817.8645  https://linked.data.gov.au/dataset/asgsed3/LGA...  POLYGON ((149.84877 -33.52784, 149.84864 -33.5...\n```\n\n\n:::\n:::\n\n\n\nThen we'll filter to Mid-Western.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nmidwestern = lgas[lgas['LGA_NAME24'] == 'Mid-Western']\n```\n:::\n\n\n\n\nNow, we will create a 5 km buffer around Mid-Western, as we are looking at a relatively small area. To do this, we'll need to convert the shapefiles between different Coordinate Reference Systems (CRS)[^crs] to allow us to draw our buffer. \n\nFirst, we'll reproject our polygon `midwestern` to a CRS measured in metres, like Australian Albers (`EPSG:3577`). Then we can create a buffer in metres around `midwestern`. Finally, we'll reproject `midwestern` match the CRS of the data we intend to use, `EPSG:4326`[^ala-crs], and unify any intersecting shapes.\n\n[^crs]: Check out [this section of a previous ALA Labs post](https://labs.ala.org.au/posts/2023-12-18_beginners-guide-make-a-map/#make-a-map) for a more complete explanation of what a CRS is.\n\n[^ala-crs]: ALA data is projected using [CRS EPSG:4326](https://epsg.io/4326) (the same one used by Google Earth).\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# reproject to Australian Albers CRS\nmidwestern_metres = midwestern.to_crs(3577)\n\n# create buffer, reproject, unify any overlapping shapes\nbuffer_5km = midwestern_metres['geometry'].buffer(5000)\nbuffer_5km_degrees = buffer_5km.to_crs(4326)\nunion_buffer_5km_degrees = shapely.unary_union(buffer_5km_degrees)\n```\n:::\n\n\n\nLet's plot our 5km buffer on a map.  \n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# import matplotlib for plotting\nimport matplotlib.pyplot as plt\n\n# set initial shapefile as axis\nax = midwestern.plot(edgecolor=\"#292C26\", linewidth = 2.0, facecolor=\"white\")\n\n# plot buffer on same axis as original shapefile\nplt.plot(*union_buffer_5km_degrees.exterior.xy, c='#358BA5', lw=2.0, label=length)\nax.axis('off') # remove axis to make plot look prettier\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-3.png){width=672}\n:::\n:::\n\n\n\nNow that we've drawn our buffer around the Mid-Western LGA, let's discuss how data obfuscation of sensitive species data might impact our decision about buffer size.\n\n# Obfuscation and why it's important for sensitive species\n\nWhen we talk about a record being **obfuscated**, we mean that the coordinate location of this record has been obscured either by *generalising* or *randomising* it.  The Atlas of Living Australia *generalises* coordinate locations by reducing the number of decimals in the record's lat/lon coordinates, lowering the point's precision. This figure below illustrates this; as the decimal points are removed, the data appears more 'grid-like' as the data loses resolution.  \n\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\"}\n# import plotting and animation packages\nimport matplotlib.animation as animation\nimport pandas as pd\nfrom IPython.display import display, Javascript\n# use below if you are running in jupyter notebook\n%matplotlib ipympl\n\n# create dataframe of points\npoints = pd.DataFrame({\n    'orig_long': [149.9153,149.9181,149.9204,149.9233,149.9101,149.9258,149.9121,149.9163,\n                  149.9295,149.9175,149.9287,149.9236,149.9109,149.9091,149.9113,149.9211,\n                  149.9073,149.9087,149.9236,149.9241,149.9289], \n    'orig_lat': [-33.3874,-33.3509,-33.3694,-33.3479,-33.3341,-33.3789,-33.3475,-33.3748,\n                 -33.3554,-33.3723,-33.3808,-33.3798,-33.3475,-33.3607,-33.3521,-33.3871,\n                 -33.3541,-33.3633,-33.3799,-33.3833,-33.3423]\n})\n\n# Round to 3 and 2 decimal places\nfor i in range(3,1,-1):\n    points['round{}_long'.format(i)] = points['orig_long'].round(i)\n    points['round{}_lat'.format(i)] = points['orig_lat'].round(i)\n\n# create initial figure\nfig,ax = plt.subplots(1,2)\n\n# create dictionary for columns - will be easier to use in update function\ncolumn_labels = {0: ['orig_long', 'orig_lat'], \n                 1: ['round3_long', 'round3_lat'], \n                 2: ['round2_long', 'round2_lat']}\n\n# create function to update each frame in animation \ndef update(frame):\n    \n    # first, create a table on the left-hand side of the figure - remove previous plots and change labels\n    ax[0].clear()\n    ax[0].table(cellText=points[column_labels[frame]].values, colLabels=['Latitude','Longitude'],loc='center')\n    ax[0].axis('off')\n\n    # create scatterplot of points\n    ax[1].clear()\n    ax[1].scatter(points[column_labels[frame][0]], points[column_labels[frame][1]], c='#5A2A57', alpha=0.5)\n    ax[1].get_xaxis().set_visible(False)\n    ax[1].get_yaxis().set_visible(False)\n\n    # return the figure for plotting\n    return fig,ax\n\n# create the animation with matplotlib, and save the animation to a gif\nani = animation.FuncAnimation(fig=fig, func=update, frames=3, interval=1000, repeat=False)\nani.save('obfuscation.gif')\n```\n:::\n\n\n\n![](obfuscation.gif)\n\nWhen data are sent to data infrastructures like the [Atlas of Living Australia](ala.org.au), generalisation of species records is performed in accordance with the state or territory the species is located, typically to distances of 1km, 10km or 50km from a species' original location[^witheld]. \n\n[^witheld]: Some records, if the species is very sensitive, may be witheld altogether.\n\n::: aside\nAlternatively, iNaturalist *randomises* their coordinate locations at a 30km resolution prior to sharing data with the Atlas of Living Australia.\n:::\n\nHow this affects our ability to know the true location of a species in an area is illustrated in the diagram below. The *true* location of the point might be anywhere in its defined radius, and its the new obscured location point will depend which direction the decimal was rounded (and by how many decimal points its resolution has been reduced). It's equally possible that an obfuscated record could be located:\n\n1.  Inside a specified area when its true location is outside the area (left), \n2.  Inside a specified area when its true location is inside the area (middle) \n3.  Outside a specified area when its true location is inside the area (right) \n\n\n\n::: {.cell fig-caption='Three theoretical but possible scenarios where obfuscation of the original point (in green) results in the obscured location ending up (1) inside an area, (2) in the buffered area, or (3) outside the area and the buffered area.'}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-5.png){width=672}\n:::\n:::\n\n\n\nThanks to obfuscation, we can't know which of these three scenarios might be true for our individual record!\n\nThe main takeaway is that obfuscation makes it harder to know that you are accurately capturing all the species in a defined area. In ecological assessment, it's generally better to capture more rather than less because species interact with their broader ecosystems (outside of our human-defined boundaries). Therefore, the goal *we* are trying to achieve by using a buffer is to realistically estimate how many species are influenced by the health of our defined area, not just what has been observed within a pre-defined boundary.\n\n# Example: The stuttering frog\n\nLet's see an example of how buffer size affects our ability to detect sensitive species in our area of interest.\n\nThe stuttering frog (*Mixophyes balbus*) is a large Australian species of frog that inhabits temperate, sub-tropical rainforest and wet sclerophyll forest.  They have a brown back and a yellow underbelly, with a light blue iris that diffuses into gold above the pupil.  Their call is a \"kook kook kook kra-a-ak kruk kruk\", which lasts 1-2 seconds[^wikipedia].\n\n[^wikipedia]: [https://en.wikipedia.org/wiki/Stuttering_frog](https://en.wikipedia.org/wiki/Stuttering_frog)\n\n::: {layout-ncol=\"3\" style=\"margin-left: auto; margin-right: auto;\"}\n<img src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/3/7/1/1/67afd228-c7ce-4cae-94bf-fcd76baf1173/original\" class=\"rounded\"/></img>\n\n<img src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/a/6/9/8/5a8b9d78-cd00-4d64-b8c3-91521a3a896a/original\" class=\"rounded\"/></img>\n\n<img src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/5/9/e/7/0c871c80-dae1-4e13-9e21-b311ca0e7e95/original\" class=\"rounded\"/></img>\n:::\n\n::: figure-caption\nLeft: [*Mixophyes balbus* (Darren Fielder CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/e20b3c82-d995-4ad4-bed0-cd8769ec5b1f), \nMiddle: [*Mixophyes balbus* (liznoble CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/62bf735b-6c70-410f-aea3-006d12fb011f), \nRight: [*Mixophyes balbus* (lachlan_harriman CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/b37f6a21-2841-439a-9b25-e9073a3fedb6)\n:::\n\n### Download data\n\nLet's download occurrence records of stuttering frogs in a bounding box that encompasses an area slightly larger than the Mid-Western LGA[^bbox]. We will also include a column with the distance each record's location has been obfuscated, `generalisationInMetres`.\n\n[^bbox]: Downloading all occurrence records using a bounding box *then* filtering the records to fit a shapefile can be a quicker way to subset records (rather than waiting for the API to process a more complex shapefile polygon shape). You can find a more in-depth article on this [here](https://galah.ala.org.au/Python/galah_user_guide/Spatial_Filtering.html#spatial-filtering).\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport galah\nimport shapely\ngalah.galah_config(email=\"<your-email-address>\")\n#                              xmin,  ymin,  xmax,  ymax\nbbox_midwestern = shapely.box(148.5, -33.6, 151.1, -31.6)\nfrogs = galah.atlas_occurrences(\n    taxa='Mixophyes balbus',\n    bbox=bbox_midwestern,\n    fields=[\"basic\",\"generalisationInMetres\"]\n)\nfrogs.head(10) # first 10 rows\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n   decimalLatitude  decimalLongitude             eventDate    scientificName                                     taxonConceptID                              recordID                      dataResourceName occurrenceStatus  generalisationInMetres\n0            -33.6             150.3  2002-02-01T00:00:00Z  Mixophyes balbus  https://biodiversity.org.au/afd/taxa/cfb20a07-...  4d9ab89c-00ff-436a-a318-f1a167c47679                      NSW BioNet Atlas          PRESENT                   10000\n1            -33.6             150.5  1977-01-25T00:00:00Z  Mixophyes balbus  https://biodiversity.org.au/afd/taxa/cfb20a07-...  bac77bf9-608a-42eb-96e8-52067feb8ebf  Queensland Museum provider for OZCAM          PRESENT                   10000\n2            -33.6             150.3                   NaN  Mixophyes balbus  https://biodiversity.org.au/afd/taxa/cfb20a07-...  37651232-d964-478e-b877-5fa02db8d3b8  Australian Museum provider for OZCAM          PRESENT                   10000\n3            -33.5             150.5                   NaN  Mixophyes balbus  https://biodiversity.org.au/afd/taxa/cfb20a07-...  f85c5f51-513c-4b99-82ef-1f81b6d842a2  Australian Museum provider for OZCAM          PRESENT                   10000\n4            -33.5             150.4                   NaN  Mixophyes balbus  https://biodiversity.org.au/afd/taxa/cfb20a07-...  14f3c420-18ea-458f-af24-6a140ef3f06d  Australian Museum provider for OZCAM          PRESENT                   10000\n5            -33.5             150.4                   NaN  Mixophyes balbus  https://biodiversity.org.au/afd/taxa/cfb20a07-...  e169ce08-a2e0-4aaf-9483-f0490209b98e  Australian Museum provider for OZCAM          PRESENT                   10000\n6            -33.5             150.6                   NaN  Mixophyes balbus  https://biodiversity.org.au/afd/taxa/cfb20a07-...  1dc66651-e50a-479a-9f52-564828eec8a4  Australian Museum provider for OZCAM          PRESENT                   10000\n7            -33.5             150.5                   NaN  Mixophyes balbus  https://biodiversity.org.au/afd/taxa/cfb20a07-...  6257e843-967d-4937-b1f8-fcbc7322ca95  Australian Museum provider for OZCAM          PRESENT                   10000\n8            -33.5             150.4                   NaN  Mixophyes balbus  https://biodiversity.org.au/afd/taxa/cfb20a07-...  67b153e8-967e-4061-bae2-b4bebe55e120  Australian Museum provider for OZCAM          PRESENT                   10000\n9            -33.5             150.1  1978-12-30T00:00:00Z  Mixophyes balbus  https://biodiversity.org.au/afd/taxa/cfb20a07-...  de8c5a71-7beb-48d5-bab0-5e76268266d8  Queensland Museum provider for OZCAM          PRESENT                   10000\n```\n\n\n:::\n:::\n\n\n\n### How buffer size affects species detection\n\nLet's consider how different buffer sizes impact our ability to detect sensitive species.  Below, we've created six buffers of increasing size around Mid-Western, with a radius of 10km drawn around each unique point representing the stuttering frog. This isn't a perfect representation of obfuscation---the true location could be anywhere inside 10 km, not directly in the middle of each circle---but it gives an idea. The stuttering frog observations are *just* outside of our area; without a buffer this frog species would go undetected, but with a 30km buffer we would detect several observations. Which should we choose?\n\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\"}\n# drop duplicates and NAs\nfrogs_set = frogs.drop_duplicates(subset=['decimalLatitude','decimalLongitude']).dropna().reset_index(drop=True)\n\n# convert to GeoDataFrame\nfrogs_set_gdf = gpd.GeoDataFrame(\n    frogs_set, \n    geometry=gpd.points_from_xy(frogs_set.decimalLongitude,frogs_set.decimalLatitude), \n    crs=\"EPSG:4326\"\n)\n\n# Reproject to CRS that uses metres to add buffer\nfrogs_set_gdf_metres = frogs_set_gdf.to_crs(3577)\n\n# add a buffer column to the same dataframe\nfrogs_set_gdf_metres['buffer'] = None\nfor i,row in frogs_set_gdf_metres.iterrows():\n    frogs_set_gdf_metres.loc[i,'buffer'] = row[\"geometry\"].buffer(frogs_set_gdf_metres.loc[i,'generalisationInMetres'])\n\n# replace `geometry` column with buffered points\ndel(frogs_set_gdf_metres['geometry'])\nfrogs_set_gdf_metres = frogs_set_gdf_metres.rename(columns={'buffer': 'geometry'})\n\n# define that buffered points are in CRS 3577, then convert back to CRS 4326\nfrogs_set_gdf_metres = frogs_set_gdf_metres.set_crs(3577)\nfrogs_set_gdf_degrees = frogs_set_gdf_metres.to_crs(4326)\n\n# start plots\nfig,ax = plt.subplots(2,3,figsize=(15,10))\nextra = 0\n\n# initialise buffer data for visualisation\nbuffer_shapes = {}\nbuffer_lengths = {\"5km\": 5000, \"10km\": 10000,\"15km\": 15000,\"20km\": 20000,\"25km\": 25000,\"30km\": 30000}\nbuffer_distances = list(buffer_lengths.keys())\n\n# get shapefile into Australian Albers CRS\nmidwestern_metres = midwestern.to_crs(3577)\n\n# loop over each buffer length to create the buffer\n# then, convert it back to degrees for conformance with the ALA CRS and unify any overlapping shapes\nfor length in buffer_lengths:\n  buffer = midwestern_metres['geometry'].buffer(buffer_lengths[length])\n  gdf_buffers_degrees = buffer.to_crs(4326)\n  union_buffers_degrees = shapely.unary_union(gdf_buffers_degrees)\n  buffer_shapes[length] = union_buffers_degrees\n\n# loop over all axes for ease of plotting\nfor i in range(len(ax)):\n    for j in range(len(ax[i])):\n\n        # plot frogs as circles on map for reference\n        a = frogs_set_gdf_degrees.plot(\n            ax=ax[i][j],facecolor='#d4af37',alpha=0.5,linewidth=2.0, edgecolor='#d4af37',label='label'\n        ) \n\n        # if this is the first subplot, there is no buffer, so you only draw the original shape and species counts\n        if i == 0 and j == 0:\n\n            # there is no buffer; plot the original shape file\n            a = ax[i][j].set_title(\"No Buffer\",fontsize=14)\n            midwestern.plot(ax=ax[i][j],edgecolor = \"#292C26\", linewidth = 2.0, facecolor = \"None\")\n\n            # get count of frogs in midwestern\n            points = [(x,y) for x,y in zip(frogs_set_gdf_degrees[\"decimalLongitude\"],frogs_set_gdf_degrees[\"decimalLatitude\"]) if shapely.contains_xy(midwestern['geometry'][74],x,y)]\n            count = len(points)\n            \n            a = ax[i][j].text(150.2,-31.85,'Count={}'.format(count),fontsize=12,color='#6E260E')\n\n        # else, draw the buffer around the original shape and include species counts\n        else:\n\n            # get buffer \n            buffer = buffer_distances[i+j+extra-1]\n            \n            # set title and plot original shape\n            a = ax[i][j].set_title(\"{} Buffer\".format(buffer),fontsize=14)\n            midwestern.plot(ax=ax[i][j],edgecolor = \"#292C26\", linewidth = 2.0, facecolor = \"None\", alpha = 1)\n\n            # get raw number of sensitive species, drop duplicates and records without lat/long\n            points = [(x,y) for x,y in zip(frogs_set_gdf_degrees[\"decimalLongitude\"],frogs_set_gdf_degrees[\"decimalLatitude\"]) if shapely.contains_xy(buffer_shapes[buffer],x,y)]\n            count = len(points)\n            \n            # add number of counts to graph for reference\n            a = ax[i][j].text(150.2,-31.85,'Count={}'.format(count),fontsize=12,color='#6E260E')\n            \n            # draw buffer on plot\n            a = ax[i][j].plot(*buffer_shapes[buffer].exterior.xy,c='#358BA5',lw=2.0,label=buffer)\n                \n        # change limits of graph and set whitespace for better looking plot\n        a = ax[i][j].set_ylim([-33.75,-31.7])\n        a = ax[i][j].set_xlim([148.7,150.8])\n        a = plt.setp(ax[i][j].get_xticklabels(), visible=False)\n        a = plt.setp(ax[i][j].get_xticklines(), visible=False)\n        a = plt.setp(ax[i][j].get_yticklabels(), visible=False)\n        a = plt.setp(ax[i][j].get_yticklines(), visible=False)\n        a = ax[i][j].set_aspect('equal')\n        a = plt.subplots_adjust(wspace=0, hspace=0.15)\n\n    # add offset to ensure that we get subplots on both lines of the overall plot\n    extra += 3\n\nplt.show();\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-7.png){width=1440}\n:::\n:::\n\n\n\nGiven the size of our area of interest, we'd likely choose a buffer between 5-15km. \n\nAlthough a larger buffer of 25-30km captures more species records, there is a risk that our buffer also captures too many species --- more than are realistically interacting with our area. When we draw our buffer, considering other factors like topography, river systems, and nutrient gradients might help us determine how big our buffer should practically be.\n\n# Threatened species in area\n\nAs a final step, let's download and visualise where threatened species have been observed in our buffered area on a map. To start, let's download occurrence records in our area with {galah-python}, with a 10 km buffer around our area (which seems reasonable given our example above). To download records, we'll once again create a buffer around Mid-Western, then use the bounding box around this area to download occurrence records using `atlas_occurrences()`[^bbox].\n\n[^bbox]: It's faster to use a bounding box than polygon shape to download records - a box has fewer points than a complicated polygon shape, making for a far simpler query to process!\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# make a 10km buffer\nbuffer = midwestern_metres['geometry'].buffer(10000)\ngdf_buffers_degrees = buffer.to_crs(4326)\nbuffer_10km = shapely.unary_union(gdf_buffers_degrees)\n\n# get bounding box around buffer for efficient querying\nbds = buffer_10km.bounds\nbbox_midwestern = shapely.box(bds[0],bds[1],bds[2],bds[3])\n\n# get all occurrence records within bounding box from the ALA\ngalah.galah_config(email='<your-email@example.com>')\noccs = galah.atlas_occurrences(\n    bbox=bbox_midwestern\n)\n\noccs.head(10) # first 10 rows\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n   decimalLatitude  decimalLongitude             eventDate                            scientificName                                     taxonConceptID                              recordID             dataResourceName occurrenceStatus\n0       -33.239130        150.227790  2017-10-06T00:00:00Z           Rhipidura (Rhipidura) albiscapa  https://biodiversity.org.au/afd/taxa/97a59c84-...  6f14e70f-07d9-4af8-9556-9b3e2c5fbb7f  BirdLife Australia, Birdata          PRESENT\n1       -33.239130        150.227790  2017-10-06T00:00:00Z           Menura (Menura) novaehollandiae  https://biodiversity.org.au/afd/taxa/944960f7-...  d7996683-ec57-4161-8a27-d3b46495c2b9  BirdLife Australia, Birdata          PRESENT\n2       -33.239130        150.227790  2017-10-06T00:00:00Z   Philemon (Tropidorhynchus) corniculatus  https://biodiversity.org.au/afd/taxa/7822040e-...  430693e5-18ec-4f4a-ae13-4721219c2a94  BirdLife Australia, Birdata          PRESENT\n3       -33.239130        150.227790  2017-10-06T00:00:00Z         Pardalotus (Pardalotus) punctatus  https://biodiversity.org.au/afd/taxa/5254fe03-...  f81e962c-5d3a-435c-97ac-aec05c640178  BirdLife Australia, Birdata          PRESENT\n4       -33.239130        150.227790  2017-10-06T00:00:00Z             Strepera (Strepera) graculina  https://biodiversity.org.au/afd/taxa/eb315a61-...  5aa466a1-fcbd-4803-ae09-b1d332519bbe  BirdLife Australia, Birdata          PRESENT\n5       -33.239130        150.227790  2017-10-06T00:00:00Z    Pachycephala (Pachycephala) pectoralis  https://biodiversity.org.au/afd/taxa/30edbd1a-...  37e273e7-a6b9-49bc-ab07-b912f1af660d  BirdLife Australia, Birdata          PRESENT\n6       -33.239130        150.227790  2017-10-06T00:00:00Z  Phylidonyris (Meliornis) novaehollandiae  https://biodiversity.org.au/afd/taxa/da002998-...  46fcb5f4-0b37-48f1-a5be-8b3d9ff96bf3  BirdLife Australia, Birdata          PRESENT\n7       -33.239130        150.227790  2017-10-06T00:00:00Z                 Ptilonorhynchus violaceus  https://biodiversity.org.au/afd/taxa/d6192a35-...  c2d9e630-440b-4982-bfc7-7d8f839aa39c  BirdLife Australia, Birdata          PRESENT\n8       -33.239130        150.227790  2017-10-06T00:00:00Z         Sericornis (Sericornis) frontalis  https://biodiversity.org.au/afd/taxa/031b2b69-...  a44bbba4-cd71-485f-808d-3476d63842c2  BirdLife Australia, Birdata          PRESENT\n9       -33.239114        150.087972  2009-03-20T00:00:00Z         Sericornis (Sericornis) frontalis  https://biodiversity.org.au/afd/taxa/031b2b69-...  fbfd67d3-630b-4249-b4ce-80bee0e6f43d             NSW BioNet Atlas          PRESENT\n```\n\n\n:::\n:::\n\n\n\nNext we'll use `show_values()` to download a list of species on the EPBC Act Threatened species list (see the tab below for more information on how to find species list IDs). By adding `all_fields=True`, we can append all original columns of the list, which for conservation lists like this includes status information.\n\n:::{.callout-tip collapse=\"true\"}\n#### How to find species list IDs\nSearch for species lists available in galah using `search_all(lists=True)`. The `species_list_uid` for the EPBC Act Threatened Species list is `dr656`. We can use this information to filter downloads.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ngalah.search_all(lists=\"epbc act\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  species_list_uid                     listName                                        description           listType           dateCreated           lastUpdated          lastUploaded           lastMatched                username fullName  itemCount     region category generalisation authority sdsType  isAuthoritative  isInvasive  isThreatened looseSearch  isBIE  isSDS   wkt\n0          dr17756                  GM_EPBC Act           EPBC Act listed species (flora and fauna  CONSERVATION_LIST  2021-08-04T14:00:00Z  2021-08-05T04:33:09Z  2021-08-05T04:33:09Z  2021-08-05T04:33:09Z  gminatel@umwelt.com.au     None        495       None     None           None      None    None            False       False         False        None  False  False  None\n1            dr656  EPBC Act Threatened Species  Threatened species currently listed under the ...  CONSERVATION_LIST  2015-04-04T13:00:00Z  2025-07-08T05:14:22Z  2025-07-08T05:13:30Z  2025-07-08T05:13:30Z   amanda.buyan@csiro.au     None       2160  Australia     None           None      None    None             True       False          True        None   True  False      \n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# get all species on epbc list + status info\nepbc_list = galah.show_values(field='dr656',lists=True,all_fields=True)\nepbc_list.head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        id                             name                  commonName                   scientificName                                              lsid dataResourceUid               raw_scientificName                         vernacularName     family                 status           sourceStatus     genus IUCN_equivalent_status rank\n0  6802348                Abutilon julianae     Norfolk Island Abutilon                Abutilon julianae  https://id.biodiversity.org.au/node/apni/2900707           dr656                Abutilon julianae                Norfolk Island Abutilon  Malvaceae  Critically Endangered  Critically Endangered  Abutilon  Critically Endangered  NaN\n1  6802412                 Acacia ammophila                        None                 Acacia ammophila  https://id.biodiversity.org.au/node/apni/2899480           dr656                 Acacia ammophila                                      -   Fabaceae             Vulnerable             Vulnerable    Acacia             Vulnerable  NaN\n2  6801831                   Acacia anomala                Grass Wattle                   Acacia anomala  https://id.biodiversity.org.au/node/apni/2914483           dr656                   Acacia anomala  Grass Wattle, Chittering Grass Wattle   Fabaceae             Vulnerable             Vulnerable    Acacia             Vulnerable  NaN\n3  6801922                   Acacia aphylla        Leafless Rock Wattle                   Acacia aphylla  https://id.biodiversity.org.au/node/apni/2913504           dr656                   Acacia aphylla                   Leafless Rock Wattle   Fabaceae             Vulnerable             Vulnerable    Acacia             Vulnerable  NaN\n4  6801331                    Acacia aprica                Blunt Wattle                    Acacia aprica  https://id.biodiversity.org.au/node/apni/2903843           dr656                    Acacia aprica                           Blunt Wattle   Fabaceae             Endangered             Endangered    Acacia             Endangered  NaN\n5  6800876                  Acacia araneosa              Spidery Wattle                  Acacia araneosa  https://id.biodiversity.org.au/node/apni/2919802           dr656                  Acacia araneosa      Spidery Wattle, Balcanoona Wattle   Fabaceae             Vulnerable             Vulnerable    Acacia             Vulnerable  NaN\n6  6801415                Acacia aristulata             Watheroo Wattle                Acacia aristulata  https://id.biodiversity.org.au/node/apni/2909621           dr656                Acacia aristulata                        Watheroo Wattle   Fabaceae             Endangered             Endangered    Acacia             Endangered  NaN\n7  6800783  Acacia ataxiphylla subsp. magna  Largefruited Tammin Wattle  Acacia ataxiphylla subsp. magna  https://id.biodiversity.org.au/node/apni/2905184           dr656  Acacia ataxiphylla subsp. magna            Large-fruited Tammin Wattle   Fabaceae             Endangered             Endangered    Acacia             Endangered  NaN\n8  6801897                 Acacia attenuata                        None                 Acacia attenuata  https://id.biodiversity.org.au/node/apni/2887463           dr656                 Acacia attenuata                                      -   Fabaceae             Vulnerable             Vulnerable    Acacia             Vulnerable  NaN\n9  6800492               Acacia auratiflora       Orangeflowered Wattle               Acacia auratiflora  https://id.biodiversity.org.au/node/apni/2913715           dr656               Acacia auratiflora                 Orange-flowered Wattle   Fabaceae             Endangered             Endangered    Acacia             Endangered  NaN\n```\n\n\n:::\n:::\n\n\n\nBy merging our species list to our occurrence records `occs`, our data will filter to only occurrence records of species on the EPBC list.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# merge epbc list with occurrences\nthreatened_species = pd.merge(occs,epbc_list[['scientificName','status']],on='scientificName')\nthreatened_species.head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   decimalLatitude  decimalLongitude             eventDate                                scientificName                                     taxonConceptID                              recordID       dataResourceName occurrenceStatus      status\n0       -33.238924        150.094060  2009-03-18T00:00:00Z                            Petauroides volans  https://biodiversity.org.au/afd/taxa/5e2dc7c9-...  5e84c591-8442-4ba4-9b49-fbc647318ac9       NSW BioNet Atlas          PRESENT  Endangered\n1       -33.238842        150.155935  2011-01-14T00:00:00Z         Stagonopleura (Stagonopleura) guttata  https://biodiversity.org.au/afd/taxa/6e872b58-...  011cabe0-abb8-4313-b626-5a4fb01cdc4d       NSW BioNet Atlas          PRESENT  Vulnerable\n2       -33.238753        149.825891  2000-02-22T00:00:00Z                             Notechis scutatus  https://biodiversity.org.au/afd/taxa/0b67b63f-...  63f6958c-6376-4e08-b4ef-f31233809122       NSW BioNet Atlas          PRESENT  Vulnerable\n3       -33.237932        150.094441  2009-03-18T00:00:00Z                            Petauroides volans  https://biodiversity.org.au/afd/taxa/5e2dc7c9-...  6c5f4849-4136-40b4-903b-ecb6327b534a       NSW BioNet Atlas          PRESENT  Endangered\n4       -33.237884        149.158401  2025-02-16T00:00:00Z                            Petauroides volans  https://biodiversity.org.au/afd/taxa/5e2dc7c9-...  31cfba82-3909-4101-99dd-890260f16484       NSW BioNet Atlas          PRESENT  Endangered\n5       -33.237554        150.181725  2011-01-14T00:00:00Z  Climacteris (Climacteris) picumnus victoriae  https://biodiversity.org.au/afd/taxa/fe69a214-...  d7d1d8e4-76e5-4e5d-af7e-bd593b4e3428       NSW BioNet Atlas          PRESENT  Vulnerable\n6       -33.237539        150.232407  2009-02-19T00:00:00Z                         Hirundapus caudacutus  https://biodiversity.org.au/afd/taxa/6485cd0c-...  e109b46e-35c6-4201-acb6-bbae9b56a84e       NSW BioNet Atlas          PRESENT  Vulnerable\n7       -33.237364        149.202657  2005-04-24T00:00:00Z                            Petauroides volans  https://biodiversity.org.au/afd/taxa/5e2dc7c9-...  fabf9319-4e59-4ed7-9d7d-eb848ae65827       NSW BioNet Atlas          PRESENT  Endangered\n8       -33.237257        150.276301  2013-01-23T12:11:00Z                              Persoonia hindii   https://id.biodiversity.org.au/node/apni/2913791  092b8717-a9ae-4698-bdc3-e9fb806d4436  iNaturalist Australia          PRESENT  Endangered\n9       -33.237188        150.088124  2009-03-18T00:00:00Z                            Petauroides volans  https://biodiversity.org.au/afd/taxa/5e2dc7c9-...  ce7a7e40-1220-4cfa-9b31-39cc6927bc04       NSW BioNet Atlas          PRESENT  Endangered\n```\n\n\n:::\n:::\n\n\n\nFinally, we'll filter our observations to only those within the buffered area around Mid-Western. \n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# convert to GeoDataFrame\nthreatened_species_gdf = gpd.GeoDataFrame(\n    threatened_species, \n    geometry=gpd.points_from_xy(threatened_species.decimalLongitude, threatened_species.decimalLatitude), \n    crs=\"EPSG:4326\"\n)\n\n# filter to species within our 10km buffer\nthreatened_species_10km = threatened_species[threatened_species_gdf.geometry.within(buffer_10km)]\n```\n:::\n\n\n\nWe can now plot our observations on a map using {matplotlib}, adjusting the opacity of our points (`alpha`) so we can see areas with many overlapping points more easily. To understand just how many additional species our 10 km buffer captures, we've added an additional bar plot comparing the number of species in Mid-Western *vs* Mid-Western + our 10 km buffer. Notice that the number of threatened species detected markedly increases with the addition of our buffer because we captured a few noticeable hotspots of threatened species observations near the edge of the Mid-Western border.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# map\nfig, ax = plt.subplots()\nax.scatter(threatened_species_10km['decimalLongitude'],threatened_species_10km['decimalLatitude'], alpha=0.3, color='#5A2A57')\nax.plot(*midwestern['geometry'][74].exterior.xy,c='#292C26',lw=2)\nax.plot(*buffer_10km.exterior.xy,c='#358BA5',lw=2)\nplt.axis('off')\nax.set_aspect(aspect='equal')\nplt.show();\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\" code-summary=\"Code to make bar plot\"}\n# import numpy for arange\nimport numpy as np\n\n# get number of species within midwestern\nmidwestern = midwestern.to_crs(4326)\nspecies_mw = threatened_species[threatened_species_gdf.geometry.within(midwestern['geometry'][74])]\n\n# set dictionary for get number of species in midwestern, sorted by status\nnum_species_mid = {x:0 for x in list(set(species_mw['status']))}\n\n# loop over each key, get the number of unique species for each status in Midwestern\nfor key in num_species_mid:\n    temp = species_mw[species_mw['status'] == key]\n    num_species_mid[key] = len(list(set(temp['scientificName'])))\n\n# sort species from most to least\nnum_species_mid_sorted = dict(sorted(num_species_mid.items(), key=lambda item: item[1]))\n\n# set dictionary to get number of species in buffer, sorted by status\nnum_species_buff = {x:0 for x in list(set(threatened_species_10km['status']))}\n\n# loop over each key, get the number of unique species for each status in buffered region\nfor key in num_species_buff:\n    temp = threatened_species_10km[threatened_species_10km['status'] == key]\n    num_species_buff[key] = len(list(set(temp['scientificName'])))\n\n# sort buffered species from most to least\nnum_species_buff_sorted = dict(sorted(num_species_buff.items(), key=lambda item: item[1]))\n\n# create plot\nfig, ax = plt.subplots()\nh, n = 0.4, np.arange(len(num_species_mid_sorted.keys()))\nbar = ax.barh(n + h/2, num_species_mid_sorted.values(), height=h, color='#292C26', label='Mid-Western')\n\n# set ticks\nbar = ax.set_yticks(range(len(num_species_mid_sorted.keys())), labels=num_species_mid_sorted.keys())\nbar = ax.barh(n - h/2, num_species_buff_sorted.values(), height=h, color='#358BA5', label='Mid-Western + buffer')\nbar = ax.legend()\nbar = ax.set_xlabel('Number of Unique Species')\nbar = ax.set_aspect(aspect=12)\n```\n:::\n\n::: {.cell .column-page layout-nrow=\"1\" layout-ncol=\"2\" layout-align=\"center\" lightbox='{\"group\":\"final-plot\"}'}\n::: {.cell-output-display}\n![Number of threatened species observed in Mid-Western only vs Mid-Western + a buffer of 10 km](index_files/figure-html/unnamed-chunk-25-9.png){fig-align='center' width=11in style=margin-left:auto;margin-right:auto;}\n:::\n\n::: {.cell-output-display}\n![Map of observations of threatened species within the buffered area around Mid-Western](index_files/figure-html/unnamed-chunk-25-10.png){fig-align='center' width=11in style=margin-left:auto;margin-right:auto;}\n:::\n:::\n\n\n\n\n# Final thoughts\n\nWe hope this post has helped you understand how to draw buffers around a shape, as well as the importance of considering buffer size when determining sensitive/threatened species in an area. Ultimately, buffer size will depend on the question we are trying to answer, whether that's for research, monitoring, conservation or environmental impact assessment prior to development.\n\nFor other Python posts, check out [our beginner’s guide to map species observations](https://labs.ala.org.au/posts/2023-12-18_beginners-guide-make-a-map/) or see [how to cross reference a species list with a conservation list](https://labs.ala.org.au/posts/2024-02-12_species-lists/).\n\n<details><summary style = \"color: #E06E53;\">Expand for session info</summary>\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n-----\ngalah               0.12.1\ngeopandas           1.1.1\nmatplotlib          3.10.3\nnatsort             8.4.0\nnumpy               2.3.1\npandas              2.3.1\nsession_info        v1.0.1\nshapely             2.1.1\n-----\nPython 3.13.5 (tags/v3.13.5:6cb20a2, Jun 11 2025, 16:15:46) [MSC v.1943 64 bit (AMD64)]\nWindows-11-10.0.22631-SP0\n-----\nSession information updated at 2025-07-31 17:21\n```\n\n\n:::\n:::\n\n\n\n</details>\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}